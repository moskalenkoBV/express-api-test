{"version":3,"sources":["../../src/routes/orders.js"],"names":["router","express","Router","post","req","res","body","email","products","firstName","lastName","order","Orders","_id","ObjectId","hbs","exphbs","create","templateData","totalPrice","emailTemplate","map","title","item","amount","price","bonus","toFixed","label","render","transporter","nodemailer","createTransport","host","port","secure","auth","user","pass","mailOptions","from","to","subject","html","sendMail","error","info","status","json","result","message","save","then","catch"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEAF,OAAOG,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B,0DAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACkDD,IAAIE,IADtD,EACSC,KADT,aACSA,KADT,EACgBC,QADhB,aACgBA,QADhB,EAC0BC,SAD1B,aAC0BA,SAD1B,EACqCC,QADrC,aACqCA,QADrC;AAEOC,iBAFP,GAEe,IAAIC,gBAAJ,CAAW;AACvBC,mBAAK,IAAIC,iBAAJ,EADkB;AAEvBP,qBAAOA,KAFgB;AAGvBC,wBAAUA;AAHa,aAAX,CAFf;AAOOO,eAPP,GAOaC,4BAAOC,MAAP,EAPb;AAQOC,wBARP,GAQsB;AACnBV,wBAAU,EADS;AAEnBW,0BAAY,CAFO;AAGnBV,yBAAWA,SAHQ;AAInBC,wBAAUA;AAJS,aARtB;AAcKU,yBAdL;;;AAgBCF,yBAAaV,QAAb,GAAwBG,MAAMH,QAAN,CAAea,GAAf,CAAmB;AAAA,qBACzC,EAAEC,OAAOC,KAAKD,KAAd,EAAqBE,QAAQD,KAAKC,MAAlC,EAA0CC,mBAAY,+BAAgBF,KAAKE,KAArB,EAA4BF,KAAKC,MAAjC,EAAyCD,KAAKG,KAA9C,EAAqDC,OAArD,CAA6D,CAA7D,CAAtD,EAAyHD,OAAOH,KAAKG,KAAL,GAAaH,KAAKG,KAAL,CAAWE,KAAxB,GAAgC,KAAhK,EADyC;AAAA,aAAnB,CAAxB;;AAIAV,yBAAaC,UAAb,eAA+B,8BAAeR,MAAMH,QAArB,EAA+BmB,OAA/B,CAAuC,CAAvC,CAA/B;;AApBD;AAAA,mBAsBuBZ,IAAIc,MAAJ,CAAW,mCAAX,EAAgDX,YAAhD,CAtBvB;;AAAA;AAsBCE,yBAtBD;AAuBOU,uBAvBP,GAuBqBC,qBAAWC,eAAX,CAA2B;AAC7CC,oBAAM,gBADuC;AAE7CC,oBAAM,GAFuC;AAG7CC,sBAAQ,IAHqC;AAI7CC,oBAAM;AACJC,sBAAM,0BADF;AAEJC,sBAAM;AAFF;AAJuC,aAA3B,CAvBrB;AAiCOC,uBAjCP,GAiCqB;AAClBC,oBAAM,4BADY;AAElBC,kBAAIlC,KAFc;AAGlBmC,8CAAyB/B,MAAME,GAHb;AAIlB8B,oBAAMvB;AAJY,aAjCrB;;;AAwCCU,wBAAYc,QAAZ,CAAqBL,WAArB,EAAkC,UAACM,KAAD,EAAQC,IAAR,EAAiB;AACjD,kBAAGD,KAAH,EAAU;AACRxC,oBAAI0C,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,QAAQ,4BAAV,EAAwCC,SAAS,YAAjD,EAArB;AACD,eAFD,MAGK;AACHvC,sBAAMwC,IAAN,GACGC,IADH,CACQ;AAAA,yBAAM/C,IAAI2C,IAAJ,CAAS,EAAEC,QAAQ,yBAAV,EAAqCC,SAAS,8BAA9C,EAAT,CAAN;AAAA,iBADR,EAEGG,KAFH,CAES;AAAA,yBAAOhD,IAAI0C,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,QAAQ,4BAAV,EAAwCC,SAAS,YAAjD,EAArB,CAAP;AAAA,iBAFT;AAGD;AACF,aATD;;AAxCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;AAmDD,CApDD;;kBAsDelD,M","file":"orders.js","sourcesContent":["import express from 'express'\r\nimport mongoose from 'mongoose'\r\nimport Orders from '../models/Orders'\r\nimport { ObjectId } from 'mongodb'\r\nimport nodemailer from 'nodemailer'\r\nimport calcPriceSingle from '../utils/calcPriceSingle'\r\nimport calcPriceTotal from '../utils/calcPriceTotal'\r\nimport exphbs from 'express-handlebars'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.post('/', (req, res) => {\r\n  (async () => {\r\n    const { email, products, firstName, lastName } = req.body\r\n    const order = new Orders({\r\n      _id: new ObjectId(),\r\n      email: email,\r\n      products: products\r\n    })\r\n    const hbs = exphbs.create()\r\n    const templateData = {\r\n      products: [],\r\n      totalPrice: 0,\r\n      firstName: firstName,\r\n      lastName: lastName\r\n    }\r\n    let emailTemplate;\r\n\r\n    templateData.products = order.products.map(item => (\r\n      { title: item.title, amount: item.amount, price: `€ ${calcPriceSingle(item.price, item.amount, item.bonus).toFixed(2)}`, bonus: item.bonus ? item.bonus.label : false }\r\n    ))\r\n\r\n    templateData.totalPrice = `€ ${calcPriceTotal(order.products).toFixed(2)}`\r\n\r\n    emailTemplate = await hbs.render('src/views/layouts/email-order.hbs', templateData)\r\n    const transporter = nodemailer.createTransport({\r\n      host: 'smtp.gmail.com',\r\n      port: 465,\r\n      secure: true,\r\n      auth: {\r\n        user: 'adyaxreacttest@gmail.com',\r\n        pass: 'adyaxReactTest@'\r\n      }\r\n    })\r\n\r\n    const mailOptions = {\r\n      from: '<b.v.moskalenko@gmail.com>',\r\n      to: email,\r\n      subject: `Your order № ${order._id}`,\r\n      html: emailTemplate\r\n    }\r\n\r\n    transporter.sendMail(mailOptions, (error, info) => {\r\n      if(error) {\r\n        res.status(400).json({ result: \"Your order is not accepted\", message: \"Try again!\" })\r\n      }\r\n      else {\r\n        order.save()\r\n          .then(() => res.json({ result: \"Your order is accepted.\", message: \"Check is sent to your Email!\" }))\r\n          .catch(err => res.status(400).json({ result: \"Your order is not accepted\", message: \"Try again!\" }))\r\n      }\r\n    })\r\n  })()\r\n})\r\n\r\nexport default router"]}