{"version":3,"sources":["../../src/routes/users.js"],"names":["router","express","Router","post","req","res","data","body","user","Users","_id","ObjectId","email","address","firstName","lastName","country","nationality","countryAdditional","addressAdditional","setPassword","password","save","then","json","userRecord","toAuthJSON","catch","status","error","err","errors","userData","token","userHandler","decodeJWT","userDataNew","findOneAndUpdate","new","emailConfirm","findOne","isValidPassword","e","get","find","users"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEAF,OAAOG,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B,MAAMC,OAAOF,IAAIG,IAAjB;AACA,MAAMC,OAAO,IAAIC,eAAJ,CAAU;AACrBC,SAAK,IAAIC,iBAAJ,EADgB;AAErBC,WAAON,KAAKM,KAFS;AAGrBC,aAASP,KAAKO,OAHO;AAIrBC,eAAWR,KAAKQ,SAJK;AAKrBC,cAAUT,KAAKS,QALM;AAMrBC,aAASV,KAAKU,OANO;AAOrBC,iBAAaX,KAAKW,WAPG;AAQrBC,uBAAmB,EARE;AASrBC,uBAAmB;AATE,GAAV,CAAb;AAWAX,OAAKY,WAAL,CAAiBd,KAAKe,QAAtB;;AAEA,MAAGf,KAAKa,iBAAR,EAA2B;AACzBX,SAAKU,iBAAL,GAAyBZ,KAAKY,iBAA9B;AACAV,SAAKW,iBAAL,GAAyBb,KAAKa,iBAA9B;AACD;AACDX,OAAKc,IAAL,GACGC,IADH,CACQ;AAAA,WAAclB,IAAImB,IAAJ,CAAS,EAAEhB,MAAMiB,WAAWC,UAAX,EAAR,EAAT,CAAd;AAAA,GADR,EAEGC,KAFH,CAES;AAAA,WAAOtB,IAAIuB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,EAAEK,OAAO,2BAAYC,IAAIC,MAAhB,CAAT,EAArB,CAAP;AAAA,GAFT;AAGD,CAtBD;;AAwBA/B,OAAOG,IAAP,CAAY,SAAZ,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,0DAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAC6BD,IAAIG,IADjC,EACSyB,QADT,aACSA,QADT,EACmBC,KADnB,aACmBA,KADnB;AAEOzB,gBAFP,GAEc,IAAIC,eAAJ,EAFd;AAGOyB,uBAHP,GAGqB1B,KAAK2B,SAAL,CAAeF,KAAf,CAHrB;AAIOG,uBAJP,GAIqB;AAClBtB,yBAAWkB,SAASlB,SADF;AAElBC,wBAAUiB,SAASjB,QAFD;AAGlBF,uBAASmB,SAASnB,OAHA;AAIlBI,2BAAae,SAASf,WAJJ;AAKlBI,wBAAUb,KAAKY,WAAL,CAAiBY,SAASX,QAA1B,CALQ;AAMlBL,uBAASgB,SAAShB,OANA;AAOlBJ,qBAAOoB,SAASpB,KAPE;AAQlBO,iCAAmBa,SAASb,iBARV;AASlBD,iCAAmBc,SAASd;AATV,aAJrB;;;AAgBCT,4BAAM4B,gBAAN,CAAuB,EAAE3B,KAAKwB,YAAYxB,GAAnB,EAAvB,EAAiD0B,WAAjD,EAA8D,EAAEE,KAAK,IAAP,EAA9D,EAA6Ef,IAA7E,CAAkF,sBAAc;AAC9F,kBAAGE,UAAH,EAAe;AACbpB,oBAAImB,IAAJ,CAAS,EAAEQ,UAAU;AACnBlB,+BAAWW,WAAWX,SADH;AAEnBC,8BAAUU,WAAWV,QAFF;AAGnBF,6BAASY,WAAWZ,OAHD;AAInBD,2BAAOa,WAAWb,KAJC;AAKnB2B,kCAAcd,WAAWb,KALN;AAMnBI,6BAASS,WAAWT,OAND;AAOnBC,iCAAaQ,WAAWR,WAPL;AAQnBE,uCAAmBM,WAAWN,iBARX;AASnBD,uCAAmBO,WAAWP;AATX,mBAAZ,EAAT;AAWD,eAZD,MAaK;AACHb,oBAAIuB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,EAAEK,OAAO,qBAAT,EAArB;AACD;AACF,aAjBD;;AAhBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;AAmCD,CApCD;;AAsCA7B,OAAOG,IAAP,CAAY,QAAZ,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClC,MAAMC,OAAOF,IAAIG,IAAjB;AACAE,kBAAM+B,OAAN,CAAc,EAAE5B,OAAON,KAAKM,KAAd,EAAd,EAAqCW,IAArC,CAA0C,gBAAQ;AAChD,QAAGf,IAAH,EAAS;AACP,UAAGA,KAAKiC,eAAL,CAAqBnC,KAAKe,QAA1B,CAAH,EAAwC;AACtChB,YAAImB,IAAJ,CAAS,EAAEhB,MAAMA,KAAKkB,UAAL,EAAR,EAAT;AACD,OAFD,MAGK;AACHrB,YAAIuB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,EAAEK,OAAO,oBAAT,EAArB;AACD;AACF,KAPD,MAQK;AACHxB,UAAIuB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,EAAEK,OAAO,qBAAT,EAArB;AACD;AACF,GAZD;AAaD,CAfD;;AAiBA7B,OAAOG,IAAP,CAAY,WAAZ,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAMC,OAAOF,IAAIG,IAAjB;AACA,MAAMC,OAAO,IAAIC,eAAJ,EAAb;AACA,MAAIyB,oBAAJ;;AAEA,MAAI;AACFA,kBAAc1B,KAAK2B,SAAL,CAAe7B,KAAK2B,KAApB,CAAd;AACAxB,oBAAM+B,OAAN,CAAc,EAAE9B,KAAKwB,YAAYxB,GAAnB,EAAd,EAAwCa,IAAxC,CAA6C,gBAAQ;AACnD,UAAGf,IAAH,EAAS;AACP,YAAMwB,WAAW;AACfpB,iBAAOJ,KAAKI,KADG;AAEf2B,wBAAc/B,KAAKI,KAFJ;AAGfE,qBAAWN,KAAKM,SAHD;AAIfC,oBAAUP,KAAKO,QAJA;AAKfF,mBAASL,KAAKK,OALC;AAMfG,mBAASR,KAAKQ,OANC;AAOfC,uBAAaT,KAAKS,WAPH;AAQfE,6BAAmB,EARJ;AASfD,6BAAmB;AATJ,SAAjB;AAWA,YAAGV,KAAKW,iBAAR,EAA2B;AACzBa,mBAASb,iBAAT,GAA6BX,KAAKW,iBAAlC,EACAa,SAASd,iBAAT,GAA6BV,KAAKU,iBADlC;AAED;AACDb,YAAImB,IAAJ,CAASQ,QAAT;AACD,OAjBD,MAkBK;AACH3B,YAAIuB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,EAAES,OAAO,iBAAT,EAArB;AACD;AACF,KAtBD;AAuBD,GAzBD,CA0BA,OAAMS,CAAN,EAAS;AACPrC,QAAIuB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,EAAES,OAAO,iBAAT,EAArB;AACD;AACF,CAlCD;;AAoCAjC,OAAO2C,GAAP,CAAW,GAAX,EAAgB,UAACvC,GAAD,EAAMC,GAAN,EAAc;AAC5BI,kBAAMmC,IAAN,GAAarB,IAAb,CAAkB,iBAAS;AACzBlB,QAAImB,IAAJ,CAASqB,KAAT;AACD,GAFD;AAGD,CAJD;;kBAMe7C,M","file":"users.js","sourcesContent":["import express from 'express'\r\nimport Users from '../models/Users'\r\nimport parseErrors from '../utils/parseErrors'\r\nimport { ObjectId } from 'mongodb'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.post('/', (req, res) => {\r\n  const data = req.body\r\n  const user = new Users({\r\n    _id: new ObjectId(),\r\n    email: data.email,\r\n    address: data.address,\r\n    firstName: data.firstName,\r\n    lastName: data.lastName,\r\n    country: data.country,\r\n    nationality: data.nationality,\r\n    countryAdditional: '',\r\n    addressAdditional: ''\r\n  })\r\n  user.setPassword(data.password)\r\n\r\n  if(data.addressAdditional) {\r\n    user.countryAdditional = data.countryAdditional\r\n    user.addressAdditional = data.addressAdditional\r\n  }\r\n  user.save()\r\n    .then(userRecord => res.json({ user: userRecord.toAuthJSON() }))\r\n    .catch(err => res.status(400).json({ error: parseErrors(err.errors) }))\r\n})\r\n\r\nrouter.post('/update', (req, res) => {\r\n  (async () => {\r\n    const { userData, token } = req.body\r\n    const user = new Users()\r\n    const userHandler = user.decodeJWT(token)\r\n    const userDataNew = {\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n      address: userData.address,\r\n      nationality: userData.nationality,\r\n      password: user.setPassword(userData.password),\r\n      country: userData.country,\r\n      email: userData.email,\r\n      addressAdditional: userData.addressAdditional,\r\n      countryAdditional: userData.countryAdditional\r\n    }\r\n\r\n    Users.findOneAndUpdate({ _id: userHandler._id }, userDataNew, { new: true }).then(userRecord => {\r\n      if(userRecord) {\r\n        res.json({ userData: {\r\n          firstName: userRecord.firstName,\r\n          lastName: userRecord.lastName,\r\n          address: userRecord.address,\r\n          email: userRecord.email,\r\n          emailConfirm: userRecord.email,\r\n          country: userRecord.country,\r\n          nationality: userRecord.nationality,\r\n          addressAdditional: userRecord.addressAdditional,\r\n          countryAdditional: userRecord.countryAdditional\r\n        } })\r\n      }\r\n      else {\r\n        res.status(400).json({ error: \"User does not exist\" })\r\n      }\r\n    })\r\n  })()\r\n})\r\n\r\nrouter.post('/login', (req, res) => {\r\n  const data = req.body\r\n  Users.findOne({ email: data.email }).then(user => {\r\n    if(user) {\r\n      if(user.isValidPassword(data.password)) {\r\n        res.json({ user: user.toAuthJSON() })\r\n      }\r\n      else {\r\n        res.status(400).json({ error: \"Incorrect password\" })\r\n      }\r\n    }\r\n    else {\r\n      res.status(400).json({ error: \"User does not exist\" })\r\n    }\r\n  })\r\n})\r\n\r\nrouter.post('/userdata', (req, res) => {\r\n  const data = req.body\r\n  const user = new Users()\r\n  let userHandler\r\n\r\n  try {\r\n    userHandler = user.decodeJWT(data.token)\r\n    Users.findOne({ _id: userHandler._id }).then(user => {\r\n      if(user) {\r\n        const userData = {\r\n          email: user.email,\r\n          emailConfirm: user.email,\r\n          firstName: user.firstName,\r\n          lastName: user.lastName,\r\n          address: user.address,\r\n          country: user.country,\r\n          nationality: user.nationality,\r\n          addressAdditional: '',\r\n          countryAdditional: ''\r\n        }\r\n        if(user.addressAdditional) {\r\n          userData.addressAdditional = user.addressAdditional,\r\n          userData.countryAdditional = user.countryAdditional\r\n        }\r\n        res.json(userData)\r\n      }\r\n      else {\r\n        res.status(400).json({ token: \"Incorrect token\" })\r\n      }\r\n    })\r\n  }\r\n  catch(e) {\r\n    res.status(400).json({ token: \"Incorrect token\" })\r\n  }\r\n})\r\n\r\nrouter.get('/', (req, res) => {\r\n  Users.find().then(users => {\r\n    res.json(users)\r\n  })\r\n})\r\n\r\nexport default router"]}