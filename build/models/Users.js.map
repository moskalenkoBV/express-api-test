{"version":3,"sources":["../../src/models/Users.js"],"names":["schema","mongoose","Schema","email","type","String","unique","passwordHash","firstName","lastName","address","country","label","value","nationality","addressAdditional","countryAdditional","timestamps","methods","setPassword","password","bcrypt","hashSync","isValidPassword","compareSync","generateJWT","jwt","sign","_id","process","env","JWT_SECRET","decodeJWT","token","verify","toAuthJSON","plugin","uniqueValidator","message","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,IAAIC,mBAASC,MAAb,CAAoB;AACjCC,SAAO,EAACC,MAAMC,MAAP,EAAeC,QAAQ,IAAvB,EAD0B;AAEjCC,gBAAcF,MAFmB;AAGjCG,aAAWH,MAHsB;AAIjCI,YAAUJ,MAJuB;AAKjCK,WAASL,MALwB;AAMjCM,WAAS;AACPC,WAAOP,MADA;AAEPQ,WAAOR;AAFA,GANwB;AAUjCS,eAAa;AACXF,WAAOP,MADI;AAEXQ,WAAOR;AAFI,GAVoB;AAcjCU,qBAAmBV,MAdc;AAejCW,qBAAmB;AACjBJ,WAAOP,MADU;AAEjBQ,WAAOR;AAFU;AAfc,CAApB,EAmBZ,EAAEY,YAAY,IAAd,EAnBY,CAAf;;AAqBAjB,OAAOkB,OAAP,CAAeC,WAAf,GAA6B,SAASA,WAAT,CAAqBC,QAArB,EAA+B;AAC1D,OAAKb,YAAL,GAAoBc,iBAAOC,QAAP,CAAgBF,QAAhB,EAA0B,EAA1B,CAApB;AACD,CAFD;;AAIApB,OAAOkB,OAAP,CAAeK,eAAf,GAAiC,SAASA,eAAT,CAAyBH,QAAzB,EAAmC;AAClE,SAAOC,iBAAOG,WAAP,CAAmBJ,QAAnB,EAA6B,KAAKb,YAAlC,CAAP;AACD,CAFD;;AAIAP,OAAOkB,OAAP,CAAeO,WAAf,GAA6B,SAASA,WAAT,GAAuB;AAClD,SAAOC,uBAAIC,IAAJ,CACL;AACEC,SAAK,KAAKA;AADZ,GADK,EAILC,QAAQC,GAAR,CAAYC,UAJP,CAAP;AAMD,CAPD;;AASA/B,OAAOkB,OAAP,CAAec,SAAf,GAA2B,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACnD,SAAOP,uBAAIQ,MAAJ,CAAWD,KAAX,EAAkBJ,QAAQC,GAAR,CAAYC,UAA9B,CAAP;AACD,CAFD;;AAIA/B,OAAOkB,OAAP,CAAeiB,UAAf,GAA4B,SAASA,UAAT,GAAsB;AAChD,SAAO;AACLF,WAAO,KAAKR,WAAL;AADF,GAAP;AAGD,CAJD;;AAMAzB,OAAOoC,MAAP,CAAcC,iCAAd,EAA+B,EAAEC,SAAS,6BAAX,EAA/B;;kBAEerC,mBAASsC,KAAT,CAAe,OAAf,EAAwBvC,MAAxB,C","file":"Users.js","sourcesContent":["import mongoose from 'mongoose'\r\nimport bcrypt from 'bcrypt'\r\nimport uniqueValidator from 'mongoose-unique-validator'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nconst schema = new mongoose.Schema({\r\n  email: {type: String, unique: true},\r\n  passwordHash: String,\r\n  firstName: String,\r\n  lastName: String,\r\n  address: String,\r\n  country: {\r\n    label: String,\r\n    value: String\r\n  },\r\n  nationality: {\r\n    label: String,\r\n    value: String\r\n  },\r\n  addressAdditional: String,\r\n  countryAdditional: {\r\n    label: String,\r\n    value: String\r\n  }\r\n}, { timestamps: true })\r\n\r\nschema.methods.setPassword = function setPassword(password) {\r\n  this.passwordHash = bcrypt.hashSync(password, 10)\r\n}\r\n\r\nschema.methods.isValidPassword = function isValidPassword(password) {\r\n  return bcrypt.compareSync(password, this.passwordHash)\r\n}\r\n\r\nschema.methods.generateJWT = function generateJWT() {\r\n  return jwt.sign(\r\n    {\r\n      _id: this._id\r\n    },\r\n    process.env.JWT_SECRET\r\n  )\r\n}\r\n\r\nschema.methods.decodeJWT = function decodeJWT(token) {\r\n  return jwt.verify(token, process.env.JWT_SECRET)\r\n}\r\n\r\nschema.methods.toAuthJSON = function toAuthJSON() {\r\n  return {\r\n    token: this.generateJWT()\r\n  }\r\n}\r\n\r\nschema.plugin(uniqueValidator, { message: 'This email is already taken' })\r\n\r\nexport default mongoose.model('Users', schema)"]}